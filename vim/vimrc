" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
        finish
endif

let mapleader = ","

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

set runtimepath^=~/.vim  "Use instead of 'vimfiles' on windows

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
nmap <leader>g :Gstatus<CR>

Plug 'tpope/vim-dispatch'

" themes
Plug 'chriskempson/base16-vim'

" syntaxes
Plug 'cakebaker/scss-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" languages
Plug 'rust-lang/rust.vim'
let g:rustfmt_autosave = 1
" cannot currently have folds since it sets foldmethod=syntax
" which slows down rustfmt to unbearable levels
" let g:rust_fold = 1

Plug 'elmcast/elm-vim'
let g:elm_format_autosave = 0
func! FormatElmAlt()
        let l:curw = winsaveview()
        :%! elm-format --stdin

        if v:shell_error != 0
                :undo
        endif
        call winrestview(l:curw)
endf

" language server
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
let g:lsp_diagnostics_enabled = 1
let g:lsp_signs_enabled = 1 " enable signs
let g:lsp_diagnostics_echo_cursor = 1 " enable echo under cursor when in normal mode
let g:lsp_signs_error = {'text': 'üíÄ'}
let g:lsp_signs_warning = {'text': '‚ö†Ô∏è'}
let g:lsp_async_completion = 1


" find
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" fzf mappings
nnoremap <c-p> :Files<cr>
nnoremap <c-g> :GFiles<cr>
if filereadable($HOME . "/.vim-site-plugins.vimrc")
        source ~/.vim-site-plugins.vimrc
endif

call plug#end()

filetype plugin indent on

set nowrap
set textwidth=100
set hidden

command! -bang -nargs=* FindInFiles call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --glob "!.git/*" --follow --color "always" '.shellescape(<q-args>), 1, <bang>0)

" put all backups in a separate dir
set backupcopy=yes
set backupdir=~/vimtmp,.
set directory=~/vimtmp,.

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Tab and editor settings
set history=50 " keep 50 lines of command line history
set laststatus=2
set encoding=utf-8
set expandtab
set autoindent " always set autoindenting on

" Searching
set incsearch " do incremental searching
set ignorecase
set smartcase

" Use <leader>q to turn off highlighting
nnoremap <leader>q :noh<CR>

" Visual stuff
set showmatch " Show matching brackets
set number " always show linenumbers

" I like to spell correctly
set spelllang=en_us

" check one time after 4s of inactivity in normal mode
set autoread
func! MyHandler(timer)
        :checktime
endfunc
let timer = timer_start(2000, 'MyHandler', {'repeat': -1})

" show whitespace
set listchars=space:¬∑,tab:‚Üí\ 
set list

" global mappings
nmap <leader>l :set list!<CR>

" Use space to get into command mode
noremap <Space> :

" search in files
nnoremap <leader>f :FindInFiles <c-r><c-w><cr>
nnoremap <leader>F :FindInFiles<space>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
        set mouse=a
        set ttymouse=sgr
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
        syntax on
        set hlsearch

        if filereadable(expand("~/.vimrc_background"))
                let base16colorspace=256
                source ~/.vimrc_background
        endif
endif

set guifont=Source\ Code\ Pro\ 9,Source\ Code\ Pro:h9

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=l
set guioptions-=b
set guioptions-=L
set guioptions-=e

inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>

nnoremap <leader>2 :diffget //2<CR>
nnoremap <leader>3 :diffget //3<CR>

" ---------------
" Sounds
" ---------------
set noerrorbells
set novisualbell
set t_vb=

" ---------------
" Mouse
" ---------------
set mousehide " Hide mouse after chars typed

" --------------
" statusline
" --------------
set statusline=
set statusline+=%#CursorColumn#
set statusline+=üåµ\ %{FugitiveHead(8)}
set statusline+=%#Title#
set statusline+=\ üìù\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=üì£\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=[%{&fileformat}\]
set statusline+=\ üìè\ %l(%L)

" Only do this part when compiled with support for autocommands.
if has("autocmd")
        augroup rust
                autocmd!
                au FileType rust nmap gd <Plug>(lsp-definition)
                au FileType rust nmap <leader>gd <Plug>(lsp-document-symbol)
                au FileType rust setlocal omnifunc=lsp#complete
        augroup END

        augroup elmFormat
                autocmd!
                autocmd BufWritePre *.elm call FormatElmAlt()
        augroup END

        augroup lspServers
                autocmd!
                if executable('rls')
                        au User lsp_setup call lsp#register_server({
                                                \ 'name': 'rls',
                                                \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
                                                \ 'whitelist': ['rust'],
                                                \ })
                endif
        augroup END
endif " has("autocmd")
