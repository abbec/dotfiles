" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
	finish
endif

let mapleader = ","

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

set runtimepath^=~/.vim  "Use instead of "vimfiles" on windows

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()

" let Vundle manage Vundle
" required!
Plugin 'gmarik/Vundle.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-rails.git'
Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-eunuch'
Plugin 'tpope/vim-markdown'

Plugin 'kana/vim-altr'

Plugin 'mustache/vim-mustache-handlebars'

Plugin 'davidhalter/jedi-vim'

" Themes
Plugin 'sjl/badwolf'
Plugin 'tomasr/molokai'
Plugin 'flazz/vim-colorschemes'

Plugin 'cakebaker/scss-syntax.vim'

Plugin 'rking/ag.vim'
let g:agprg="ag --nocolor --nogroup --column"
nnoremap <leader>f :Ag! "<C-R><C-W>"

" Airline
Plugin 'bling/vim-airline'

Plugin 'scrooloose/syntastic'

Plugin 'scrooloose/nerdtree'
nnoremap <leader>x :NERDTreeToggle<CR>

Plugin 'kien/ctrlp.vim'

Plugin 'sjl/splice.vim'

Plugin 'jmcantrell/vim-virtualenv'

Plugin 'kylef/apiblueprint.vim'

call vundle#end()
filetype plugin indent on

set nowrap

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
	set nobackup		" do not keep a backup file, use versions instead
else
	set backup		" keep a backup file
endif

set backupdir=~/vimtmp,.
set directory=~/vimtmp,.

" Tab and editor settings
set history=50		" keep 50 lines of command line history
set showcmd		" display incomplete commands
set shiftwidth=8
set tabstop=8
set laststatus=2
set wildmenu           " Turn on WiLd menu
set hidden             " Change buffer - without saving
set encoding=utf-8

" Searching
set incsearch		" do incremental searching
set ignorecase
set smartcase
set wildignore+=*.o,*.obj,*.exe,*.so,*.dll,*.pyc,.svn,.hg,.bzr,.git

" Visual stuff
set showmatch " Show matching brackets
set number " always show linenumbers
set ruler " show the cursor position all the time

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" Use ESC to turn off highlighting
nnoremap <leader>q :noh<CR>

" Use space to get into command mode
nnoremap <Space> :

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

nmap <leader>o <Plug>(altr-forward)
nmap <leader>p <Plug>(altr-back)

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	syntax on
	set hlsearch

	set background=dark
	colorscheme molokai
endif

set guifont=terminus\ 9,bitstream\ vera\ sans\ mono:h8,consolas:h9

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=l
set guioptions-=b
set guioptions-=L
set guioptions-=e

" ---------------
" Sounds
" ---------------
set noerrorbells
set novisualbell
set t_vb=

" ---------------
" Mouse
" ---------------
set mousehide  " Hide mouse after chars typed

highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen

" Only do this part when compiled with support for autocommands.
if has("autocmd")

	" Put these in an autocmd group, so that we can delete them easily.
	augroup vimrcEx
		au!

		" For all text files set 'textwidth' to 78 characters.
		autocmd FileType text setlocal textwidth=80

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid or when inside an event handler
		" (happens when dropping a file on gvim).
		" Also don't do it when the mark is in the first line, that is the default
		" position when opening a file.
		autocmd BufReadPost *
					\ if line("'\"") > 1 && line("'\"") <= line("$") |
					\   exe "normal! g`\"" |
					\ endif

	augroup END

	" Show trailing whitepace and spaces before a tab:
	autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/ containedin=ALL
else

	set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
				\ | wincmd p | diffthis
endif
