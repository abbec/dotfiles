" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
	finish
endif

let mapleader = ","

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

set runtimepath^=~/.vim  "Use instead of 'vimfiles' on windows

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'shumphrey/fugitive-gitlab.vim'
let g:fugitive_gitlab_domains = ['https://git.frostbite.com/']
nmap <leader>g :Gstatus<CR>

Plug 'tpope/vim-dispatch'


" themes
Plug 'dracula/vim', { 'as': 'dracula' }

" code checking
Plug 'w0rp/ale'

" syntaxes
Plug 'cakebaker/scss-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-markdown'
let g:jsx_ext_required = 0
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" languages
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
set hidden
let g:racer_experimental_completer = 1
let g:rustfmt_command = "cargo +nightly fmt -- "
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rust_fold = 1
Plug 'Quramy/tsuquyomi'
Plug 'davidhalter/jedi-vim'

" find
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Mapping selecting mappings
nnoremap <c-p> :Files<cr>
nnoremap <c-g> :GFiles<cr>
if filereadable($HOME . "/.vim-site-plugins.vimrc")
	source ~/.vim-site-plugins.vimrc
endif

call plug#end()

filetype plugin indent on

set nowrap
set textwidth=100

" ale linters
let g:ale_linters = {'rust': ['cargo']}
let g:ale_rust_cargo_check_tests = 1
let g:ale_rust_cargo_check_all_targets = 1
let g:ale_rust_rls_toolchain = 'stable'
" let g:ale_open_list = 0

command! -bang -nargs=* FindInFiles call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --glob "!.git/*" --follow --color "always" '.shellescape(<q-args>), 1, <bang>0)
nnoremap <leader>f :FindInFiles <c-r><c-w><cr>
nnoremap <leader>F :FindInFiles<space>

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set completeopt=longest,menuone,preview

if has("vms")
	set nobackup		" do not keep a backup file, use versions instead
else
	set backup		" keep a backup file
endif

set backupdir=~/vimtmp,.
set directory=~/vimtmp,.

" Tab and editor settings
set history=50		" keep 50 lines of command line history
set showcmd		" display incomplete commands
set shiftwidth=8
set tabstop=8
set laststatus=2
set wildmenu           " Turn on WiLd menu
set hidden             " Change buffer - without saving
set encoding=utf-8

" Searching
set incsearch		" do incremental searching
set ignorecase
set smartcase
set wildignore+=*.o,*.obj,*.exe,*.so,*.dll,*.pyc,.svn,.hg,.bzr,.git

" Visual stuff
set showmatch " Show matching brackets
set number " always show linenumbers
set ruler " show the cursor position all the time

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" check one time after 4s of inactivity in normal mode
set autoread
" au FocusGained,BufEnter * :checktime
func! MyHandler(timer)
	:checktime
endfunc
let timer = timer_start(2000, 'MyHandler', {'repeat': -1})


set listchars=space:·,tab:→\ 
set list
nmap <leader>l :set list!<CR>

" Don't use Ex mode, use Q for formatting
map Q gq

" Use <leader>q to turn off highlighting
nnoremap <leader>q :noh<CR>

" Use space to get into command mode
noremap <Space> :

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

nmap <leader>o <Plug>(altr-forward)
nmap <leader>p <Plug>(altr-back)

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
	set ttymouse=sgr
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	syntax on
	set hlsearch

	"set background=dark
	colorscheme dracula
	set termguicolors
endif

set guifont=Source\ Code\ Pro\ 9,Source\ Code\ Pro:h9

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=l
set guioptions-=b
set guioptions-=L
set guioptions-=e

inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>

nnoremap <leader>2 :diffget //2<CR>
nnoremap <leader>3 :diffget //3<CR>

" ---------------
" Sounds
" ---------------
set noerrorbells
set novisualbell
set t_vb=

" ---------------
" Mouse
" ---------------
set mousehide  " Hide mouse after chars typed

" statusline
set statusline=
set statusline+=%#PmenuSel#
set statusline+=🌵\ %{FugitiveHead(8)}
set statusline+=%#Title#
set statusline+=\ 📝\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=📣\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=[%{&fileformat}\]
set statusline+=\ 📏\ %l(%L)

highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen
hi SpellCap gui=underline cterm=underline ctermbg=NONE guibg=NONE guifg=lightyellow ctermfg=yellow
hi SpellBad gui=underline cterm=underline ctermbg=NONE guibg=NONE guifg=lightred ctermfg=red

hi SpecialKey guifg=gray40 ctermfg=gray

" Only do this part when compiled with support for autocommands.
if has("autocmd")

	" Put these in an autocmd group, so that we can delete them easily.
	augroup vimrcEx
		au!

		" For all text files set 'textwidth' to 78 characters.
		autocmd FileType text setlocal textwidth=80

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid or when inside an event handler
		" (happens when dropping a file on gvim).
		" Also don't do it when the mark is in the first line, that is the default
		" position when opening a file.
		autocmd BufReadPost *
					\ if line("'\"") > 1 && line("'\"") <= line("$") |
					\   exe "normal! g`\"" |
					\ endif

	augroup END

	" Show trailing whitepace and spaces before a tab:
	autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/ containedin=ALL

	augroup rust
		autocmd!

		au FileType rust nmap gd <Plug>(rust-def)
		au FileType rust nmap gs <Plug>(rust-def-split)
		au FileType rust nmap gx <Plug>(rust-def-vertical)
		au FileType rust nmap <leader>gd <Plug>(rust-doc)
	augroup END
else

	set autoindent		" always set autoindenting on

endif " has("autocmd")
