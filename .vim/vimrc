" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
	finish
endif

let mapleader = ","

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

set runtimepath^=~/.vim  "Use instead of 'vimfiles' on windows

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-fugitive'
Plug 'shumphrey/fugitive-gitlab.vim'
let g:fugitive_gitlab_domains = ['https://git.frostbite.com/']
nmap <leader>g :Gstatus<CR>

Plug 'tpope/vim-dispatch'

" themes
Plug 'dracula/vim', { 'as': 'dracula' }

" code checking
Plug 'w0rp/ale'

" important üí©
Plug 'kyuhi/vim-emoji-complete'

" syntaxes
Plug 'cakebaker/scss-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'tpope/vim-markdown'
let g:jsx_ext_required = 0
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

" languages
Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
let g:racer_experimental_completer = 1
let g:rustfmt_command = "~/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rustfmt"
let g:rustfmt_autosave = 1
let g:rustfmt_emit_files = 1
let g:rust_fold = 1
Plug 'Quramy/tsuquyomi'
Plug 'davidhalter/jedi-vim'
Plug 'elmcast/elm-vim'
let g:elm_format_autosave = 1
let g:elm_format_fail_silently = 0

" find
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" Mapping selecting mappings
nnoremap <c-p> :Files<cr>
nnoremap <c-g> :GFiles<cr>
if filereadable($HOME . "/.vim-site-plugins.vimrc")
	source ~/.vim-site-plugins.vimrc
endif

call plug#end()

filetype plugin indent on

set nowrap
set textwidth=100
set hidden

" ale linters
let g:ale_linters = {'rust': ['cargo']}
let g:ale_rust_cargo_check_tests = 1
let g:ale_rust_cargo_check_all_targets = 1
let g:ale_rust_rls_toolchain = 'stable'
" let g:ale_open_list = 0

command! -bang -nargs=* FindInFiles call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --glob "!.git/*" --follow --color "always" '.shellescape(<q-args>), 1, <bang>0)
nnoremap <leader>f :FindInFiles <c-r><c-w><cr>
nnoremap <leader>F :FindInFiles<space>

set completeopt=longest,menuone,preview

" put all backups in a separate dir
set backupcopy=yes
set backupdir=~/vimtmp,.
set directory=~/vimtmp,.

" Tab and editor settings
set history=50		" keep 50 lines of command line history
set laststatus=2
set encoding=utf-8

" Searching
set incsearch		" do incremental searching
set ignorecase
set smartcase

" Use <leader>q to turn off highlighting
nnoremap <leader>q :noh<CR>

" Visual stuff
set showmatch " Show matching brackets
set number " always show linenumbers

" check one time after 4s of inactivity in normal mode
set autoread
func! MyHandler(timer)
	:checktime
endfunc
let timer = timer_start(2000, 'MyHandler', {'repeat': -1})

" show whitespace
set listchars=space:¬∑,tab:‚Üí\ 
set list
nmap <leader>l :set list!<CR>

" Use space to get into command mode
noremap <Space> :

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
	set mouse=a
	set ttymouse=sgr
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
	syntax on
	set hlsearch

	colorscheme dracula
	set termguicolors
endif

set guifont=Source\ Code\ Pro\ 9,Source\ Code\ Pro:h9

set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=l
set guioptions-=b
set guioptions-=L
set guioptions-=e

inoremap  <Up>     <NOP>
inoremap  <Down>   <NOP>
inoremap  <Left>   <NOP>
inoremap  <Right>  <NOP>

nnoremap <leader>2 :diffget //2<CR>
nnoremap <leader>3 :diffget //3<CR>

" ---------------
" Sounds
" ---------------
set noerrorbells
set novisualbell
set t_vb=

" ---------------
" Mouse
" ---------------
set mousehide  " Hide mouse after chars typed

" statusline
set statusline=
set statusline+=%#PmenuSel#
set statusline+=üåµ\ %{FugitiveHead(8)}
set statusline+=%#Title#
set statusline+=\ üìù\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#CursorColumn#
set statusline+=üì£\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=[%{&fileformat}\]
set statusline+=\ üìè\ %l(%L)

highlight ExtraWhitespace ctermbg=darkgreen guibg=darkgreen

" Customize ALE colors
hi SpellCap gui=underline cterm=underline ctermbg=NONE guibg=NONE guifg=lightyellow ctermfg=yellow
hi SpellBad gui=underline cterm=underline ctermbg=NONE guibg=NONE guifg=lightred ctermfg=red

" whitespace syntax color
hi SpecialKey guifg=gray40 ctermfg=gray

" Only do this part when compiled with support for autocommands.
if has("autocmd")
	augroup rust
		autocmd!

		au FileType rust nmap gd <Plug>(rust-def)
		au FileType rust nmap gs <Plug>(rust-def-split)
		au FileType rust nmap gx <Plug>(rust-def-vertical)
		au FileType rust nmap <leader>gd <Plug>(rust-doc)
	augroup END
endif " has("autocmd")
set autoindent		" always set autoindenting on
